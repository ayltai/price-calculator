plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'checkstyle'
    id 'com.github.spotbugs'           version '3.0.0'
    id 'org.sonarqube'                 version '3.3'
    id 'jacoco'
    id 'com.getkeepsafe.dexcount'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

String VERSION_REVISION = 'git rev-list --count HEAD'.execute().text.trim()
String VERSION_HASH     = 'git rev-parse --short HEAD'.execute().text.trim()

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        applicationId    'com.github.ayltai.pricecalculator'
        minSdkVersion    19
        targetSdkVersion 29
        versionCode      1
        versionName      '1.0.' + VERSION_REVISION + '-' + VERSION_HASH

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        dataBinding {
            enabled true
        }

        vectorDrawables {
            useSupportLibrary true
        }
    }

    viewBinding {
    	enabled true
    }

    signingConfigs {
        release {
            storeFile     project.file('./key-store.jks')
            keyAlias      System.getenv('ANDROID_KEY_ALIAS')
            storePassword System.getenv('ANDROID_STORE_PASSWORD')
            keyPassword   System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }

            multiDexEnabled     true
            testCoverageEnabled true
        }

        release {
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

            minifyEnabled   true
            shrinkResources true
            signingConfig   signingConfigs.release
            proguardFiles   getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution          'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources true
            returnDefaultValues     true

            all {
                maxHeapSize = "1280m"
            }
        }
    }

    lintOptions {
        abortOnError false
        disable      'MissingTranslation', 'RestrictedApi'
    }

    aaptOptions {
        cruncherEnabled Boolean.valueOf(System.getenv('CI'))
    }

    dexOptions {
        preDexLibraries !Boolean.valueOf(System.getenv('CI'))
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    multiDexVersion       = '2.0.1'
    supportLibraryVersion = '28.0.0'
    jetPackVersion        = '2.2.1'
    lifecycleVersion      = '2.3.1'
    daggerVersion         = '2.38'
    lombokVersion         = '1.18.20'
    robolectricVersion    = '4.6.1'
    androidTestVersion    = '1.4.0'
    espressoVersion       = '3.4.0'
}

dependencies {
    // Multi-dex support
    debugImplementation       "androidx.multidex:multidex:$multiDexVersion"
    testImplementation        "androidx.multidex:multidex:$multiDexVersion"
    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'

    // Android Architecture libraries
    implementation ("androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion") {
        exclude group : 'com.android.support'
    }
    implementation ('androidx.lifecycle:lifecycle-extensions:2.2.0') {
        exclude group : 'com.android.support'
    }
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Android Support libraries
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.4.0'

    // Firebase
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.1.0'
    implementation 'com.google.firebase:firebase-config:21.0.0'

    // Reactive programming
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Dependency injection
    implementation      "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Code generation tools
    compileOnly         "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Debugging
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    // Unit testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.test:core:$androidTestVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"

    // Instrumented testing
    androidTestImplementation "androidx.test:rules:$androidTestVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation ("androidx.test.espresso:espresso-core:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("androidx.test.espresso:espresso-intents:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestUtil           "androidx.test:orchestrator:$androidTestVersion"
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-v4:$supportLibraryVersion"
    }
}

//region Checkstyle configurations

checkstyle {
    toolVersion    '8.31'
    configFile     rootProject.file('./checkstyle.xml')
    ignoreFailures true
    showViolations true
}

task checkstyle(type : Checkstyle) {
    description = 'Running Checkstyle'
    group       = 'verification'

    source  'src/main/java', 'src/debug/java'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    reports {
        xml.enabled  = Boolean.valueOf(System.getenv('CI'))
        html.enabled = !Boolean.valueOf(System.getenv('CI'))
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }

    classpath = files()
}

//endregion

//region SpotBugs configurations

spotbugs {
    toolVersion    '4.0.2'
    effort         'max'
    reportLevel    'medium'
    ignoreFailures true
    excludeFilter  rootProject.file('./spotbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled  = true == System.getenv('CI')
        html.enabled = true == !System.getenv('CI')
    }
}

//endregion

//region JaCoCo configurations

def coverageSourceDirs = [
    'src/main/java',
    'src/debug/java'
]

jacoco {
    toolVersion '0.8.5'
}

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    description = 'Generate JaCoCo coverage reports'
    group       = 'Reporting'

    classDirectories.from = fileTree(
        dir      : 'build/intermediates/javac/debug/classes',
        excludes : [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BR.class',
            '**/databinding/*',
            '**/*BindingImpl.*',
            '**/*Binding.*',
            '**/*DataBinderMapperImpl.*',
            '**/*DataBinderMapperImpl$*.*',
            '**/*DataBindingInfo.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/Dagger*.*',
            '**/*Module_Provide*Factory.*',
            '**/*_Factory.*',
            '**/*_MembersInjector.*',
            '**/*_LifecycleAdapter.*'
        ]
    )

    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from     = fileTree(
        dir     : "$buildDir",
        include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec' ]
    )

    doFirst {
        files('build/intermediates/javac/debug/compileDebugJavaWithJavac').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//endregion

//region SonarQube configurations

sonarqube {
    properties {
        property 'sonar.java.source',                    '8'
        property 'sonar.android.lint.report',            'build/reports/lint-results.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

//endregion

//region DexCount configurations

dexcount {
    includeTotalMethodCount = true
    orderByMethodCount      = true
}

//endregion
